#!/bin/sh
#
#  GETARCH -- Determine or set the current platform architecture parameters.
#
#  Usage:       getarch
#		getarch -set [<arch>] [opts]
#
#	-mach		print the architecture name [default]
#	-current	print the currently configured arch
#	-nbits		print number of bits in an int (32 or 64)
#
#	-actual		print actual architecture name regardless of VOCARCH
#	-set <arch>	manually reset the environment architecture
#
# ----------------------------------------------------------------------------


##############################################################################
# START OF MACHDEP DEFINITIONS.
##############################################################################

VERSION="V2.0"
nbits=32
debug=0


#----------------------------------
# Determine platform architecture.
#----------------------------------

if [ -x /usr/bin/uname ] ; then
    uname_cmd=/usr/bin/uname
elif [ -x /bin/uname ] ; then
    uname_cmd=/bin/uname
else
    echo  "No 'uname' command found to determine architecture."
    exit 1
fi

export UNAME=`$uname_cmd    | tr '[A-Z]' '[a-z]'`
if [ "$UNAME" = "sunos" ] ; then
    export UNAME_M=`$uname_cmd -m | cut -c2- | tr '[A-Z]' '[a-z]'`
else
    export UNAME_M=`$uname_cmd -m | tr '[A-Z]' '[a-z]' | tr ' ' '_'`
fi
export OSVERSION=`$uname_cmd -r | cut -c1`



if [ "$1" = "-set" -a  "$2" != "" ] ; then
    export VOCARCH="$2"
    export MNAME="$2"
    export MNAME_M="$2"
    shift ; shift
fi

# Allow a VOCARCH definition in the environment to override.
if [ "$1" = "-actual" ] ; then
    export MNAME="$UNAME"
    export MNAME_M="$UNAME_M"
    unset VOCARCH
elif [ "$1" = "-current" ] ; then
    export MNAME=`/bin/ls -lad $iraf/bin | \
		awk '{ printf ("%s\n", $11) }' | \
		sed -e 's/bin.//g'`
    export MNAME_M="$UNAME_M"
    export VOCARCH="$MNAME"

elif [ -z "$MNAME" ] ; then
    if [ "$IRAFARCH" -a -z "$VOCARCH" ] ; then	# Let IRAFARCH set arch
	export VOCARCH="$IRAFARCH"
    fi
    if [ -z "$1" ] ; then
	if [ "$VOCARCH" ] ; then
	    export MNAME="$VOCARCH"
	    export MNAME_M="$UNAME_M"
	else
	    export MNAME="$UNAME"
	    export MNAME_M="$UNAME_M"
	fi
    else
        export MNAME="$UNAME"
        export MNAME_M="$UNAME_M"
    fi
fi


# Set some common defaults for most platforms
nbits=32			# 32-bit architecture
	
        

# Determine parameters for each architecture.
case "$MNAME" in
    darwin|ipad|macosx|macintel)			# Mac OS X
	if [ "$VOCARCH" ] ;  then
            mach="$VOCARCH"
	    if [ "$mach" = "macintel" ] ; then
		nbits=64
	    fi
	else 
            if [ "$MNAME_M" = "x86_64" ] ; then		# 64-bit
		mach="macintel"
		nbits=64
            elif [ "$MNAME_M" = "x86" -o "$MNAME_M" = "i386" -o "$MNAME_M" = "ppc" -o "$MNAME_M" = "power_macintosh" ] ; then
		mach="macosx"
		nbits=32
            else
		mach="ipad"		# iOS Device
		nbits=32
            fi
	fi
	;;

    redhat|linux|linux64)
	if [ $VOCARCH ] ; then
            mach="$VOCARCH"
	    if [ "$mach" = "linux64" ] ; then
		nbits=64
	    fi
	elif [ "$MNAME_M" = "x86_64" ] ; then		# Linux x86_64
            mach="linux64"
	    nbits=64
	else					        # Linux
            mach="linux"
	    nbits=32
	fi
	;;
    ssun|sparc|sunos)
	if [ "$UNAME_M" != "86pc" ] ; then
            if [ "$OSVERSION" = 5 ] ; then			# Sparc Solaris
		mach="ssun"
            else			   		# Sparc SunOS 4.x
		mach="sparc"
	    fi
	else
            mach="sunos"	    	# Intel Solaris x86
	fi
	;;
    freebsd) 					# FreeBSD
	mach="freebsd"
	;;

    *)
	# We don't want to be limited by the CYGWIN version numbering so
	# look for a truncated match here before punting.
	os_mach=`echo $UNAME | cut -c1-6`
	if [ "$os_mach" = "cygwin" ] ; then
            mach="cygwin"
	else
	    echo  "Unable to determine platform architecture for ($MNAME)."
	    exit 1
	fi
	;;
esac

##############################################################################
# END OF MACHDEP DEFINITIONS.
##############################################################################

case "$1" in
    ""|"-mach"|"-actual"|"-current")
	echo $mach
	;;
    "-nbits")
	echo $nbits
	;;
    "-set")
	if [ "$2" != "" ] ; then
	    export VOCARCH="$2"
	    shift ; shift
	fi
	goto repeat_
	;;
    *)
	echo "Invalid option '"$1"'"
	;;
esac
